#!/bin/bash

# devc - Dev Container CLI wrapper script

set -e

SCRIPT_PATH="$(readlink -f "$0")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
DEVC_SUPPORT_IMAGE="devc-support:latest"
VERBOSE=false
DEVC_HOME="${HOME}/.devc"

# Function to log verbose messages
verbose_log() {
    if [ "$VERBOSE" = true ]; then
        echo "VERBOSE: $1" >&2
    fi
}

# Function to find project root
find_project_root() {
    local curr_dir="$PWD"

    local dir="$curr_dir"
    while [ "$dir" != "/" ]; do
        if [ -f "${dir}/devc" ] || [ -f "${dir}/.devc.yml" ] || [ -f "${dir}/devc.yml" ]; then
            verbose_log "Found project root at $dir because of devc files"
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done

    local dir="$curr_dir"
    while [ "$dir" != "/" ]; do
        if [ -d "${dir}/.devcontainer" ]; then
            verbose_log "Found project root at $dir because of .devcontainer"
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done

    local dir="$curr_dir"
    while [ "$dir" != "/" ]; do
        if [ -d "${dir}/.git" ]; then
            verbose_log "Found project root at $dir because of .git"
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done

    verbose_log "Defaulting to project root in current directory"
    echo "$curr_dir"
}

# Function to ensure Docker is installed and running
ensure_docker() {
    if ! command -v docker &> /dev/null; then
        echo "Error: Docker is not installed or not in PATH. Please install Docker and try again." >&2
        exit 1
    fi

    if ! docker info &> /dev/null; then
        echo "Error: Docker daemon is not running. Please start Docker and try again." >&2
        exit 1
    fi
}

# Function to run the devc-support container
run_devc_support() {
    local cmd="$1"
    shift

    verbose_log "Running devc-support container"
    if [ -t 0 ] && [ -t 1 ]; then
        verbose_log "Running in interactive mode with TTY"
        terminal_opts="-it"
    else
        verbose_log "Running in non-interactive mode"
        terminal_opts="-i"
    fi

    docker run --rm "$terminal_opts" \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v "${PROJECT_DIR}:${PROJECT_DIR}" \
        -v "${DEVC_HOME}:${DEVC_HOME}" \
        -e DOCKER_HOST="unix:///var/run/docker.sock" \
        -e LOCAL_USER_ID="$(id -u)" \
        -e LOCAL_GROUP_ID="$(id -g)" \
        -e DEVC_VERBOSE="$VERBOSE" \
        -e PROJECT_DIR="$PROJECT_DIR" \
        -e DEVC_HOME="$DEVC_HOME" \
        -w "$PROJECT_DIR" \
        "$DEVC_SUPPORT_IMAGE" \
        $cmd "$@"
}

# Parse command line arguments
while [[ "$1" == -* ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --debug-support-shell)
            DEBUG_SUPPORT_SHELL=true
            shift
            ;;
        *)
            break
            ;;
    esac
done

# Ensure required directories exist
mkdir -p "$DEVC_HOME"

# Find project root
PROJECT_DIR="$(find_project_root)"
verbose_log "Project directory: $PROJECT_DIR"

# Ensure Docker is installed and running
ensure_docker

# Run devc-backend in the devc-support container or debug support shell
if [ "$DEBUG_SUPPORT_SHELL" = true ]; then
    verbose_log "Running debug support shell"
    run_devc_support bash
else
    verbose_log "Running devc-backend"
    run_devc_support python3 /opt/devc/devc_backend.py "$@"
fi